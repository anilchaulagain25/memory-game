{"version":3,"sources":["Card.js","App.js","utils.js","index.js"],"names":["Card","props","useState","flipped","setFlipped","className","onClick","onBoxClick","img","alt","src","Utils","array","randomIndex","currentIndex","length","Math","floor","random","imagesArray","index","push","slice","rows","newImagesArray","tempArray","imgIndexer","tempColumnArray","id","App","gameArray","setGameArray","lastSelected","doneArray","isFlipped","setTimeout","indexOf","parseInt","totalCnt","alert","useEffect","map","row","c","style","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAEO,SAASA,EAAKC,GAAQ,IAAD,EACMC,oBAAS,GADf,mBACjBC,EADiB,KACRC,EADQ,KAKxB,OAAO,yBAASC,UAAW,YAApB,SAEH,sBAAKC,QALU,WACfL,EAAMM,WAAWJ,EAASC,EAAYH,EAAMO,MAIlBH,UAAW,SAAWF,EAAU,UAAY,IAAtE,UACI,qBAAKE,UAAW,QAAhB,SACI,qBACII,IAAI,aACJC,IAAI,sBAGZ,qBAAKL,UAAW,OAAhB,SACI,qBACII,IAAI,gBACJC,IAAK,UAAYT,EAAMO,a,MCP3C,I,ICZaG,EACA,SAAUC,GAIf,IAHA,IAAiCC,EAA7BC,EAAeF,EAAMG,OAGlB,IAAMD,GAAc,CAGvBD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,IAJuB,MAOqB,CACxCF,EAAMC,GAAcD,EAAME,IAD7BF,EAAME,GAPgB,KAODF,EAAMC,GAPL,KAW3B,OAAOD,GDLXO,EAAc,GACTC,EAAQ,EAAGA,GALI,GAKsBA,IAC5CD,EAAYE,KAAKD,EAAQ,QAE3BT,EAAcQ,GACdA,EAAcA,EAAYG,MAAM,EAAGC,GAEnC,IADA,IAAMC,EAAiB,GACdJ,EAAQ,EAAGA,EAAQD,EAAYJ,OAAQK,IAC9CI,EAAeJ,GAAUD,EAAYC,GACrCI,EAAeL,EAAYJ,OAASK,GAAUD,EAAYC,GAE5DT,EAAca,GAKd,IAFA,IAAMC,EAAY,GACdC,EAAa,EACRN,EAAQ,EAAGA,EAtBP,EAsBqBA,IAAS,CAEzC,IADA,IAAMO,EAAkB,GACfP,EAAQ,EAAGA,EAvBP,EAuBuBA,IAClCO,EAAgBP,GAAS,CAAE,WAAa,EAAMQ,GAAIF,EAAYlB,IAAKgB,EAAeE,MAEpFD,EAAUL,GAASO,EAqDNE,MAjDf,WAAgB,IAAD,EACqB3B,mBAAS,IAD9B,mBACN4B,EADM,KACKC,EADL,KAETC,EAAe,KACbC,EAAY,GACZ1B,EAAa,SAAU2B,EAAW9B,EAAYI,GAC9CA,IACFJ,GAAW,GACX+B,YAAW,YACuB,IAA5BF,EAAUG,QAAQ5B,KAChBwB,EACEA,IAAiBxB,GACnByB,EAAUZ,KAAKb,GACfwB,EAAe,KACXK,SAASC,KAAkBL,EAAUlB,QACvCwB,MAAM,iBAGRnC,GAAW,GAGb4B,EAAexB,KAGlB,OAQP,OAJAgC,qBAAU,WACRT,EAAaN,KACZ,IAGD,qBAAKpB,UAAW,iBAAhB,SACGyB,EAAUW,KAAI,SAAAC,GACb,OAAQ,qBAAqBrC,UAAW,MAAhC,SAEJqC,EAAID,KAAI,SAAAE,GACN,OAAO,qBAAgBtC,UAAW,SAAUuC,MAAO,CAAEC,gBAAiB,QAA/D,SACL,cAAC7C,EAAD,CAAMO,WAAYA,EAAYC,IAAKmC,EAAEnC,OADtBmC,EAAEf,QAHPc,EAAI,GAAGd,UElEjCkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.b4705b6c.chunk.js","sourcesContent":["import { useState } from 'react'\nimport './card.css'\nexport function Card(props) {\n    const [flipped, setFlipped] = useState(false);\n    const onBoxClick = () => {\n        props.onBoxClick(flipped, setFlipped, props.img);\n    }\n    return <section className={\"container\"}>\n\n        <div onClick={onBoxClick} className={\"card \" + (flipped ? 'flipped' : '')}>\n            <div className={\"front\"}>\n                <img\n                    alt=\"what image\"\n                    src=\"images/what.png\" />\n\n            </div>\n            <div className={\"back\"}>\n                <img\n                    alt=\"image to find\"\n                    src={\"images/\" + props.img} />\n            </div>\n        </div>\n    </section >\n\n}","import { Card } from './Card';\nimport './master.css'\nimport { useState, useEffect } from 'react';\nimport { Utils } from './utils';\n//GLOBAL VARIABLES\nconst rows = 2;\nconst colums = 3;\nconst imagesAvailable = 19;\nlet totalCnt = rows * colums;\n\n//BUILD IMAGES ARRAY FROM GIVEN IMAGES - RANDOMLY\nlet imagesArray = [];\nfor (let index = 1; index <= imagesAvailable; index++) {\n  imagesArray.push(index + \".png\");\n}\nUtils.shuffle(imagesArray);\nimagesArray = imagesArray.slice(0, rows * colums / 2);\nconst newImagesArray = [];\nfor (let index = 0; index < imagesArray.length; index++) {\n  newImagesArray[index] = (imagesArray[index]);\n  newImagesArray[imagesArray.length + index] = (imagesArray[index]);\n}\nUtils.shuffle(newImagesArray);\n\n//BUILD ROW COLUMN ARRAY\nconst tempArray = [];\nlet imgIndexer = 0;\nfor (let index = 0; index < rows; index++) {\n  const tempColumnArray = [];\n  for (let index = 0; index < colums; index++) {\n    tempColumnArray[index] = { 'isFlipped': true, id: imgIndexer, img: newImagesArray[imgIndexer++] };\n  }\n  tempArray[index] = tempColumnArray;\n}\n\n//REACT COMPONENT\nfunction App() {\n  const [gameArray, setGameArray] = useState([]);\n  let lastSelected = null;\n  const doneArray = [];\n  const onBoxClick = function (isFlipped, setFlipped, img) {\n    if (img) {\n      setFlipped(true);\n      setTimeout(() => {\n        if (doneArray.indexOf(img) === -1) {\n          if (lastSelected) {\n            if (lastSelected === img) {\n              doneArray.push(img);\n              lastSelected = null;\n              if (parseInt(totalCnt / 2) === doneArray.length) {\n                alert(\"Well done !!\");\n              }\n            } else {\n              setFlipped(false);\n            }\n          } else {\n            lastSelected = img;\n          }\n        }\n      }, 500);\n    }\n  };\n\n  useEffect(() => {\n    setGameArray(tempArray);\n  }, [])\n\n  return (\n    <div className={\"card-container\"}>\n      {gameArray.map(row => {\n        return (<div key={row[0].id} className={\"row\"}>\n          {\n            row.map(c => {\n              return <div key={c.id} className={\"column\"} style={{ backgroundColor: '#aaa' }}>\n                <Card onBoxClick={onBoxClick} img={c.img} />\n              </div>\n            })\n          }\n        </div>)\n      })}\n    </div >\n\n  );\n}\n\nexport default App;\n","export const Utils = {\n    shuffle: function (array) {\n        var currentIndex = array.length, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    },\n    getRandomElement: (items) => items[Math.floor(Math.random() * items.length)]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}